var Packet = function (packet) {
	if (packet) this.parse(packet);	
}

Packet.Prefix = function (prefix) {
	if (prefix) this.parse(prefix);	
}

Packet.Prefix.patterns = {
	// serverName
	type1: /^([0-9a-zA-Z\-\_]+(?:[\.\:\/][0-9a-zA-Z\-\_]*)*)$/,
	// nickname and user and host
	type2: /^([a-zA-Z](?:[a-zA-Z]|[0-9]|[\-\_\[\]\\\`\^\{\}\|])*)(?:!([^\x20\x00\x0D\x0A@]+))?(?:@([0-9a-zA-Z\-\_]+(?:[\.\:\/][0-9a-zA-Z\-\_]*)*))?$/
}

Packet.Prefix.prototype.parse = function (prefix) {
	
  var matches = prefix.match(Packet.Prefix.patterns.type1);
  
	if (matches !== null) {
		this.type = 1;
		this.serverName = matches[1];
		
		return ;
	}
	
	matches = prefix.match(Packet.Prefix.patterns.type2);
	if (matches !== null) {
		this.type = 2;
		this.nickname = matches[1];
		if (typeof matches[2] !== 'undefined') this.uesr = matches[2];
		if (typeof matches[3] !== 'undefined') this.host = matches[3];
		
		return ;
	}
	
	throw new Error('Invalid prefix');
}

Packet.patterns = {
//	frame: /^(?::([^\x20]+)\x20+)?([a-zA-Z]+|\d\d\d)(\x20+.*)$/,
	frame: /^(?::([^\x20\x00\x0D\x0A]+)\x20+)?([a-zA-Z]{1,15}|[0-9][0-9][0-9])(\x20+.*)$/,
//	parameters: /^((?:\x20+[^:\x20]?[^\x20\x00\x0D\x0A]*)*)(?:\x20+:([^\x00\x0D\x0A]*))?$/,
	parameters: /^((?:\x20+[^:\x20\x00\x0D\x0A][^\x20\x00\x0D\x0A]*)*)(?:\x20+:([^\x00\x0D\x0A]*))?$/
}

// :services. 328 NodePacket #node.js :http://nodejs.org/
// :ChanServ!ChanServ@services. NOTICE NodePacket :[#node.js] Visit the wiki page https://github.com/joyent/node/wiki

Packet.prototype.parse = function (packet) {
	var matches = packet.match(Packet.patterns.frame);
	if (matches === null) throw new Error('Invalid packet');
	
	if (typeof matches[1] !== 'undefined') this.prefix = new Packet.Prefix(matches[1]);
	
	this.command = matches[2];
	
	// parameter parsing
	if (typeof matches[3] !== 'undefined') {
  	this.parameters = [];
    
		var parameters = matches[3].match(Packet.patterns.parameters);
		if (typeof parameters[1] !== 'undefined') {
       var middleParameters = parameters[1].split(/\x20+/);
       for (var i = 0; i < middleParameters.length; i++) {
         middleParameters[i] = middleParameters[i].trim();
         if (middleParameters[i] !== '') this.parameters.push(middleParameters[i]);
       } 
    }
    
		if (typeof parameters[2] !== 'undefined') this.parameters.push(parameters[2]);
	}
}

module.exports = Packet;